// Generated by CoffeeScript 1.6.2
(function() {
  var Maplist,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Maplist = (function() {
    Maplist.prototype.markers = {};

    function Maplist(element, mapObject, options) {
      this.element = element;
      this.mapObject = mapObject;
      this.options = options;
      this.mouseEventCallback = __bind(this.mouseEventCallback, this);
      this.plotMarkers();
      this.childTagName = this.element.children()[0].tagName;
      if (this.options["center"] == null) {
        this.options["center"] = this.element.children(":first").data("latlong");
      }
      this.mapObject.setCenter(new google.maps.LatLng(this.options["center"][0], this.options["center"][1]));
      this.element.on("mouseenter mouseleave", "li", this.mouseEventCallback);
    }

    Maplist.prototype.mouseEventCallback = function(event) {
      var $target, iconName;

      $target = this.elementOrClosestNode(event);
      iconName = "hoverIcon";
      if (event.type === "mouseleave") {
        iconName = "icon";
      }
      if (this.options[iconName] != null) {
        return this.getMarkerAt($target.data("latlong")).setIcon(this.options[iconName]);
      }
    };

    Maplist.prototype.elementOrClosestNode = function(event) {
      if (event.target.tagName !== this.childTagName) {
        return $(event.target).closest(this.childTagName);
      } else {
        return $(event.target);
      }
    };

    Maplist.prototype.getMarkerAt = function(latLong) {
      return this.markers["" + latLong[0]]["" + latLong[1]];
    };

    Maplist.prototype.addMarker = function(marker, latLong) {
      if (this.markers["" + latLong[0]] == null) {
        this.markers["" + latLong[0]] = {};
      }
      return this.markers["" + latLong[0]]["" + latLong[1]] = marker;
    };

    Maplist.prototype.plotMarkers = function() {
      var $child, gLatLong, i, latLong, marker, markerOptions, _i, _ref, _results;

      _results = [];
      for (i = _i = 0, _ref = this.element.children().length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        $child = this.element.children().eq(i);
        latLong = $child.data("latlong");
        gLatLong = new google.maps.LatLng(latLong[0], latLong[1]);
        markerOptions = {
          position: gLatLong,
          map: this.mapObject,
          listElementId: $child.attr("id")
        };
        if (this.options["icon"] != null) {
          markerOptions["icon"] = this.options["icon"];
        }
        marker = new google.maps.Marker(markerOptions);
        this.addMarker(marker, latLong);
        _results.push(this.registerCallbacksForMarker(marker));
      }
      return _results;
    };

    Maplist.prototype.registerCallbacksForMarker = function(marker) {
      google.maps.event.addListener(marker, 'mouseover', (function(marker, element, options) {
        return function() {
          $("#" + marker.listElementId).addClass("selected");
          if (options["hoverIcon"] != null) {
            return marker.setIcon(options["hoverIcon"]);
          }
        };
      })(marker, this.element, this.options));
      return google.maps.event.addListener(marker, 'mouseout', (function(marker, element, options) {
        return function() {
          $("#" + marker.listElementId).removeClass("selected");
          if (options["icon"] != null) {
            return marker.setIcon(options["icon"]);
          }
        };
      })(marker, this.element, this.options));
    };

    return Maplist;

  })();

  $(function() {
    return $.fn.maplist = function(mapObject, options) {
      return new Maplist(this, mapObject, options);
    };
  });

}).call(this);
